// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id           String          @id @db.VarChar(50)
  name         String
  year         Int             @db.SmallInt
  coverUrl     String?         @map("cover_url")
  coverFileExt String?         @map("cover_file_ext") @db.VarChar(10)
  songs        Song[]
  likes        FavoriteAlbum[]

  @@map("albums")
}

model Song {
  id                   String               @id @db.VarChar(50)
  title                String
  year                 Int                  @db.SmallInt
  performer            String
  genre                String
  duration             Int?
  album                Album?               @relation(fields: [albumId], references: [id])
  albumId              String?              @map("album_id") @db.VarChar(50)
  audioUrl             String?              @map("audio_url")
  audioFileExt         String?              @map("audio_file_ext") @db.VarChar(10)
  playlists            Playlist[]
  activitiesInPlaylist ActivityOnPlaylist[]

  @@map("songs")
}

model User {
  id                   String               @id @db.VarChar(50)
  username             String               @unique @db.VarChar(25)
  password             String
  fullname             String
  playlists            Playlist[]
  collaborations       Collaboration[]
  activitiesOnPlaylist ActivityOnPlaylist[]
  favoriteAlbums       FavoriteAlbum[]

  @@map("users")
}

model Authentication {
  token String @unique

  @@map("authentications")
}

model Playlist {
  id             String               @id @db.VarChar(50)
  name           String
  owner          User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String               @map("owner") @db.VarChar(50)
  songs          Song[]
  collaborations Collaboration[]
  activities     ActivityOnPlaylist[]

  @@map("playlists")
}

model Collaboration {
  id         String   @id @db.VarChar(50)
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String   @map("playlist_id") @db.VarChar(50)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id") @db.VarChar(50)

  @@unique(fields: [playlistId, userId])
  @@map("collaborations")
}

model ActivityOnPlaylist {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String   @map("playlist_id") @db.VarChar(50)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.VarChar(50)
  song       Song     @relation(fields: [songId], references: [id])
  songId     String   @map("song_id") @db.VarChar(50)
  action     String   @db.VarChar(10)
  time       DateTime @default(now())

  @@id([songId, action, time])
  @@map("activities_on_playlist")
}

model FavoriteAlbum {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @map("user_id") @db.VarChar(50)
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @map("album_id") @db.VarChar(50)

  @@id([userId, albumId])
  @@map("favorite_albums")
}
